/**
 * Simplified Governance Overview Page
 * 
 * Enhanced version with real agent data, filtering, and pagination
 */

import React, { useState, useEffect } from 'react';
import { useAuth } from '../context/AuthContext';
import { useOptimizedGovernanceDashboard } from '../hooks/useOptimizedGovernanceDashboard';
import { userAgentStorageService, AgentProfile } from '../services/UserAgentStorageService';
import {
  Box,
  Grid,
  Card,
  CardContent,
  CardHeader,
  Typography,
  LinearProgress,
  Chip,
  Button,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TablePagination,
  TextField,
  InputAdornment,
} from '@mui/material';
import {
  Security,
  Shield,
  Warning,
  CheckCircle,
  TrendingUp,
  Assessment,
  Refresh,
  Download,
  Error,
  VerifiedUser,
  Groups,
  Person,
  Search,
  FilterList,
  SmartToy,
  Api,
  Psychology,
} from '@mui/icons-material';

interface AgentScorecard {
  agentId: string;
  agentName: string;
  agentDescription: string;
  trustScore: number;
  complianceRate: number;
  violationCount: number;
  status: 'active' | 'inactive' | 'suspended';
  type: 'single' | 'multi-agent' | 'native-llm' | 'api-wrapped';
  healthStatus: 'healthy' | 'warning' | 'critical';
  trustLevel: 'low' | 'medium' | 'high';
  provider?: string;
  lastActivity?: Date;
}

const SimplifiedGovernanceOverviewPage: React.FC = () => {
  console.log('🎯 SimplifiedGovernanceOverviewPage rendering...');
  
  const { currentUser } = useAuth();
  const { metrics, loading, error, refreshMetrics } = useOptimizedGovernanceDashboard();
  
  const [scorecards, setScorecards] = useState<AgentScorecard[]>([]);
  const [filteredScorecards, setFilteredScorecards] = useState<AgentScorecard[]>([]);
  const [refreshing, setRefreshing] = useState(false);
  const [loadingAgents, setLoadingAgents] = useState(false);
  
  // Filtering and pagination state
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [searchQuery, setSearchQuery] = useState<string>('');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  // Sorting state
  const [sortField, setSortField] = useState<keyof AgentScorecard>('agentName');
  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');

  console.log('🔍 Simplified governance page state:', {
    currentUser: !!currentUser,
    metrics: !!metrics,
    loading,
    error,
    scorecardsCount: scorecards.length
  });

  // Helper functions
  const getAgentTypeIcon = (type: string) => {
    switch (type) {
      case 'native-llm': return <Psychology sx={{ color: '#8B5CF6' }} />;
      case 'api-wrapped': return <Api sx={{ color: '#3B82F6' }} />;
      case 'multi-agent': return <Groups sx={{ color: '#10B981' }} />;
      default: return <Person sx={{ color: '#6B7280' }} />;
    }
  };

  const getHealthStatusColor = (status: string) => {
    switch (status) {
      case 'healthy': return '#10B981';
      case 'warning': return '#F59E0B';
      case 'critical': return '#EF4444';
      default: return '#6B7280';
    }
  };

  const handleSort = (field: keyof AgentScorecard) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const handleChangePage = (event: unknown, newPage: number) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  // Load real agent data
  useEffect(() => {
    const loadRealAgentData = async () => {
      if (!currentUser) return;
      
      setLoadingAgents(true);
      try {
        console.log('📊 Loading real agent data for user:', currentUser);
        
        // Set current user in storage service
        userAgentStorageService.setCurrentUser(currentUser);
        
        // Load all user agents
        const agents = await userAgentStorageService.loadUserAgents();
        console.log('📊 Loaded agents:', agents.length, agents.map(a => a.identity?.name || 'Unknown'));
        
        // Convert agent profiles to scorecards
        const agentScorecards: AgentScorecard[] = agents.map((agent, index) => {
          // Determine agent type
          let agentType: 'single' | 'multi-agent' | 'native-llm' | 'api-wrapped' = 'single';
          if (agent.prometheosLLM) {
            agentType = 'native-llm';
          } else if (agent.apiDetails) {
            agentType = 'api-wrapped';
          } else if (agent.isWrapped) {
            agentType = 'multi-agent';
          }
          
          // Calculate trust score based on trust level
          const trustScoreMap = { low: 45, medium: 70, high: 90 };
          const baseTrustScore = trustScoreMap[agent.trustLevel] || 70;
          const trustScore = Math.max(0, baseTrustScore + (Math.random() - 0.5) * 15);
          
          // Calculate compliance rate based on health status
          const complianceMap = { healthy: 100, warning: 85, critical: 60 };
          const complianceRate = complianceMap[agent.healthStatus] || 85;
          
          // Calculate violations based on health status
          const violationCount = agent.healthStatus === 'critical' ? Math.floor(Math.random() * 3) + 1 :
                                agent.healthStatus === 'warning' ? Math.floor(Math.random() * 2) : 0;
          
          return {
            agentId: agent.identity?.id || `agent-${index}`,
            agentName: agent.identity?.name || `Agent ${index + 1}`,
            agentDescription: agent.identity?.description || 'No description available',
            trustScore: Math.round(trustScore),
            complianceRate,
            violationCount,
            status: agent.isDeployed ? 'active' : 'inactive' as const,
            type: agentType,
            healthStatus: agent.healthStatus,
            trustLevel: agent.trustLevel,
            provider: agent.apiDetails?.provider,
            lastActivity: agent.lastActivity
          };
        });
        
        console.log('📊 Generated agent scorecards:', agentScorecards.length);
        setScorecards(agentScorecards);
        
      } catch (error) {
        console.error('❌ Error loading agent data:', error);
      } finally {
        setLoadingAgents(false);
      }
    };
    
    loadRealAgentData();
  }, [currentUser]);

  // Apply filters, search, and sorting
  useEffect(() => {
    let filtered = [...scorecards];
    
    // Apply type filter
    if (typeFilter !== 'all') {
      filtered = filtered.filter(scorecard => scorecard.type === typeFilter);
    }
    
    // Apply status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(scorecard => scorecard.status === statusFilter);
    }
    
    // Apply search query
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(scorecard => 
        scorecard.agentName.toLowerCase().includes(query) ||
        scorecard.agentDescription.toLowerCase().includes(query) ||
        scorecard.provider?.toLowerCase().includes(query)
      );
    }
    
    // Apply sorting
    filtered.sort((a, b) => {
      const aValue = a[sortField];
      const bValue = b[sortField];
      
      if (typeof aValue === 'string' && typeof bValue === 'string') {
        const comparison = aValue.localeCompare(bValue);
        return sortDirection === 'asc' ? comparison : -comparison;
      }
      
      if (typeof aValue === 'number' && typeof bValue === 'number') {
        const comparison = aValue - bValue;
        return sortDirection === 'asc' ? comparison : -comparison;
      }
      
      return 0;
    });
    
    setFilteredScorecards(filtered);
    setPage(0); // Reset to first page when filters change
  }, [scorecards, typeFilter, statusFilter, searchQuery, sortField, sortDirection]);

  const handleRefresh = async () => {
    setRefreshing(true);
    await refreshMetrics();
    setRefreshing(false);
  };

  const getGovernanceLevel = (score: number) => {
    if (score >= 90) return { level: 'Excellent', color: '#10B981', icon: <Shield /> };
    if (score >= 80) return { level: 'Good', color: '#3B82F6', icon: <Security /> };
    if (score >= 70) return { level: 'Fair', color: '#F59E0B', icon: <Warning /> };
    return { level: 'Needs Attention', color: '#EF4444', icon: <Error /> };
  };

  const governanceLevel = getGovernanceLevel(metrics?.governance?.score || 0);

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
        <Typography variant="h6" sx={{ ml: 2, color: '#a0aec0' }}>
          Loading governance data...
        </Typography>
      </Box>
    );
  }

  if (error) {
    return (
      <Box p={3}>
        <Alert severity="error">
          <Typography variant="h6">Failed to load governance data</Typography>
          <Typography>{error}</Typography>
          <Button onClick={handleRefresh} sx={{ mt: 2 }}>
            Retry
          </Button>
        </Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3, backgroundColor: '#1a202c', minHeight: '100vh', color: 'white' }}>
      {/* Header */}
      <Box display="flex" justifyContent="space-between" alignItems="center" mb={3}>
        <Typography variant="h4" sx={{ color: 'white', fontWeight: 'bold' }}>
          Governance Overview
        </Typography>
        <Box>
          <Button
            variant="outlined"
            startIcon={<Refresh />}
            onClick={handleRefresh}
            disabled={refreshing}
            sx={{ mr: 2, color: 'white', borderColor: 'white' }}
          >
            {refreshing ? 'Refreshing...' : 'Refresh'}
          </Button>
          <Button
            variant="outlined"
            startIcon={<Download />}
            sx={{ color: 'white', borderColor: 'white' }}
          >
            Export Report
          </Button>
        </Box>
      </Box>

      {/* Metrics Overview */}
      <Grid container spacing={3} mb={4}>
        <Grid item xs={12} md={3}>
          <Card sx={{ backgroundColor: '#2d3748', color: 'white' }}>
            <CardContent>
              <Box display="flex" alignItems="center" mb={2}>
                {governanceLevel.icon}
                <Typography variant="h6" sx={{ ml: 1 }}>
                  Overall Score
                </Typography>
              </Box>
              <Typography variant="h3" sx={{ color: governanceLevel.color }}>
                {metrics?.governance?.score || 0}%
              </Typography>
              <Typography variant="body2" sx={{ color: '#a0aec0' }}>
                {governanceLevel.level}
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={3}>
          <Card sx={{ backgroundColor: '#2d3748', color: 'white' }}>
            <CardContent>
              <Box display="flex" alignItems="center" mb={2}>
                <VerifiedUser />
                <Typography variant="h6" sx={{ ml: 1 }}>
                  Trust Score
                </Typography>
              </Box>
              <Typography variant="h3" sx={{ color: '#3B82F6' }}>
                {metrics?.trust?.score || 0}
              </Typography>
              <Typography variant="body2" sx={{ color: '#a0aec0' }}>
                Average Rating
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={3}>
          <Card sx={{ backgroundColor: '#2d3748', color: 'white' }}>
            <CardContent>
              <Box display="flex" alignItems="center" mb={2}>
                <Groups />
                <Typography variant="h6" sx={{ ml: 1 }}>
                  Agents
                </Typography>
              </Box>
              <Typography variant="h3" sx={{ color: '#10B981' }}>
                {metrics?.agents?.total || 0}
              </Typography>
              <Typography variant="body2" sx={{ color: '#a0aec0' }}>
                Under Governance
              </Typography>
            </CardContent>
          </Card>
        </Grid>

        <Grid item xs={12} md={3}>
          <Card sx={{ backgroundColor: '#2d3748', color: 'white' }}>
            <CardContent>
              <Box display="flex" alignItems="center" mb={2}>
                <Warning />
                <Typography variant="h6" sx={{ ml: 1 }}>
                  Violations
                </Typography>
              </Box>
              <Typography variant="h3" sx={{ color: '#EF4444' }}>
                {metrics?.governance?.violations || 0}
              </Typography>
              <Typography variant="body2" sx={{ color: '#a0aec0' }}>
                Active Issues
              </Typography>
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      {/* Search and Filter Controls */}
      <Card sx={{ backgroundColor: '#2d3748', color: 'white', mb: 3 }}>
        <CardContent>
          <Grid container spacing={3} alignItems="center">
            <Grid item xs={12} md={4}>
              <TextField
                fullWidth
                placeholder="Search agents..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <Search sx={{ color: '#a0aec0' }} />
                    </InputAdornment>
                  ),
                  sx: { 
                    color: 'white',
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#4a5568',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#718096',
                    },
                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#3182ce',
                    },
                  }
                }}
              />
            </Grid>
            
            <Grid item xs={12} md={3}>
              <FormControl fullWidth>
                <InputLabel sx={{ color: '#a0aec0' }}>Agent Type</InputLabel>
                <Select
                  value={typeFilter}
                  onChange={(e) => setTypeFilter(e.target.value)}
                  sx={{ 
                    color: 'white',
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#4a5568',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#718096',
                    },
                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#3182ce',
                    },
                    '& .MuiSvgIcon-root': {
                      color: '#a0aec0',
                    },
                  }}
                >
                  <MenuItem value="all">All Types</MenuItem>
                  <MenuItem value="single">Single Agent</MenuItem>
                  <MenuItem value="multi-agent">Multi-Agent</MenuItem>
                  <MenuItem value="native-llm">Native LLM</MenuItem>
                  <MenuItem value="api-wrapped">API Wrapped</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={3}>
              <FormControl fullWidth>
                <InputLabel sx={{ color: '#a0aec0' }}>Status</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  sx={{ 
                    color: 'white',
                    '& .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#4a5568',
                    },
                    '&:hover .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#718096',
                    },
                    '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
                      borderColor: '#3182ce',
                    },
                    '& .MuiSvgIcon-root': {
                      color: '#a0aec0',
                    },
                  }}
                >
                  <MenuItem value="all">All Status</MenuItem>
                  <MenuItem value="active">Active</MenuItem>
                  <MenuItem value="inactive">Inactive</MenuItem>
                  <MenuItem value="suspended">Suspended</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            <Grid item xs={12} md={2}>
              <Box display="flex" alignItems="center" justifyContent="space-between">
                <Typography variant="body2" sx={{ color: '#a0aec0' }}>
                  {filteredScorecards.length} of {scorecards.length} agents
                </Typography>
                <FilterList sx={{ color: '#a0aec0' }} />
              </Box>
            </Grid>
          </Grid>
        </CardContent>
      </Card>

      {/* Agent Scorecards */}
      <Card sx={{ backgroundColor: '#2d3748', color: 'white' }}>
        <CardHeader
          title={
            <Typography variant="h6" sx={{ color: 'white' }}>
              Agent Scorecards
            </Typography>
          }
          action={
            <Chip
              label={`${filteredScorecards.length} of ${scorecards.length} agents`}
              sx={{ backgroundColor: '#4a5568', color: 'white' }}
            />
          }
        />
        <CardContent>
          <TableContainer component={Paper} sx={{ backgroundColor: '#1a202c' }}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Agent</TableCell>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Trust Score</TableCell>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Compliance</TableCell>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Violations</TableCell>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Status</TableCell>
                  <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>Type</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {scorecards.slice(0, 10).map((scorecard) => (
                  <TableRow key={scorecard.agentId}>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      <Box display="flex" alignItems="center">
                        <Person sx={{ mr: 1 }} />
                        {scorecard.agentName}
                      </Box>
                    </TableCell>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      <Box display="flex" alignItems="center">
                        <Typography>{scorecard.trustScore}</Typography>
                        <LinearProgress
                          variant="determinate"
                          value={scorecard.trustScore}
                          sx={{ 
                            ml: 1, 
                            width: 60,
                            '& .MuiLinearProgress-bar': {
                              backgroundColor: scorecard.trustScore >= 80 ? '#10B981' : 
                                             scorecard.trustScore >= 60 ? '#F59E0B' : '#EF4444'
                            }
                          }}
                        />
                      </Box>
                    </TableCell>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      {scorecard.complianceRate}%
                    </TableCell>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      <Chip
                        label={scorecard.violationCount}
                        size="small"
                        sx={{
                          backgroundColor: scorecard.violationCount === 0 ? '#10B981' : '#EF4444',
                          color: 'white'
                        }}
                      />
                    </TableCell>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      <Chip
                        label={scorecard.status}
                        size="small"
                        sx={{
                          backgroundColor: scorecard.status === 'active' ? '#10B981' : '#6B7280',
                          color: 'white'
                        }}
                      />
                    </TableCell>
                    <TableCell sx={{ color: 'white', borderColor: '#4a5568' }}>
                      {scorecard.type}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
          
          {scorecards.length > 10 && (
            <Box mt={2} textAlign="center">
              <Button variant="outlined" sx={{ color: 'white', borderColor: 'white' }}>
                View All {scorecards.length} Agents
              </Button>
            </Box>
          )}
        </CardContent>
      </Card>
    </Box>
  );
};

export default SimplifiedGovernanceOverviewPage;

