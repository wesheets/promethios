"use strict";(this.webpackChunkAtlasCompanion=this.webpackChunkAtlasCompanion||[]).push([[307],{307:(e,t,i)=>{i.r(t),i.d(t,{VerificationService:()=>a,default:()=>o});var n=i(160),s=i(407),r=function(e,t,i,n){return new(i||(i=Promise))((function(s,r){function a(e){try{c(n.next(e))}catch(e){r(e)}}function o(e){try{c(n.throw(e))}catch(e){r(e)}}function c(e){var t;e.done?s(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(a,o)}c((n=n.apply(e,t||[])).next())}))};class a{static getInstance(){return a.instance||(a.instance=new a),a.instance}constructor(){this.deploymentTokens=new Map,this.manifestCache=new Map,this.verificationStatus=new Map,this.events=n.d.getInstance(),this.config=s.E.getInstance(),this.events.subscribe("atlas:agent-detected",(e=>{this.verifyAgent(e.agentId,e.deploymentToken)}))}verifyAgent(e,t){return r(this,void 0,void 0,(function*(){try{let i=this.deploymentTokens.get(e);if(!i&&(i=t||(yield this.fetchDeploymentToken(e)),!i))return this.verificationStatus.set(e,"token_invalid"),this.events.publish("atlas:verification-updated",{agentId:e,status:"token_invalid"}),"token_invalid";if(!this.verifyDeploymentToken(i))return this.verificationStatus.set(e,"token_invalid"),this.events.publish("atlas:verification-updated",{agentId:e,status:"token_invalid"}),"token_invalid";if(i.expiresAt<Date.now())return this.verificationStatus.set(e,"token_expired"),this.events.publish("atlas:verification-updated",{agentId:e,status:"token_expired"}),"token_expired";const n=yield this.fetchManifest(e);return n?n.agentId!==i.agentId||n.governanceProfile!==i.governanceProfile?(this.verificationStatus.set(e,"manifest_invalid"),this.events.publish("atlas:verification-updated",{agentId:e,status:"manifest_invalid"}),"manifest_invalid"):this.verifyMerkleRoot(n)?(this.verificationStatus.set(e,"verified"),this.events.publish("atlas:verification-updated",{agentId:e,status:"verified"}),"verified"):(this.verificationStatus.set(e,"merkle_mismatch"),this.events.publish("atlas:verification-updated",{agentId:e,status:"merkle_mismatch"}),"merkle_mismatch"):(this.verificationStatus.set(e,"manifest_missing"),this.events.publish("atlas:verification-updated",{agentId:e,status:"manifest_missing"}),"manifest_missing")}catch(t){return console.error("Error verifying agent:",t),this.verificationStatus.set(e,"unverifiable"),this.events.publish("atlas:verification-updated",{agentId:e,status:"unverifiable"}),"unverifiable"}}))}fetchDeploymentToken(e){return r(this,void 0,void 0,(function*(){try{const t=this.config.getBaseUrl(),i=this.config.getVerificationEndpoint();if(!t&&!i)return this.createMockToken(e);const n=i||`${t}/verify/token/${e}`,s=yield fetch(n);if(!s.ok)throw new Error(`Failed to fetch deployment token: ${s.statusText}`);const r=yield s.json();return this.deploymentTokens.set(e,r),r}catch(t){return console.error("Error fetching deployment token:",t),this.createMockToken(e)}}))}fetchManifest(e){return r(this,void 0,void 0,(function*(){try{const t=this.manifestCache.get(e);if(t)return t;const i=this.config.getBaseUrl();if(!i)return this.createMockManifest(e);try{const t=yield fetch(`/.well-known/promethios-manifest.json?agent=${e}`);if(t.ok){const i=yield t.json();return this.manifestCache.set(e,i),i}}catch(e){console.warn("Failed to fetch manifest from well-known location")}const n=yield fetch(`${i}/governance/manifest/${e}`);if(!n.ok)throw new Error(`Failed to fetch governance manifest: ${n.statusText}`);const s=yield n.json();return this.manifestCache.set(e,s),s}catch(t){return console.error("Error fetching governance manifest:",t),this.createMockManifest(e)}}))}verifyDeploymentToken(e){const{signature:t}=e;return function(e,t){var i={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(i[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var s=0;for(n=Object.getOwnPropertySymbols(e);s<n.length;s++)t.indexOf(n[s])<0&&Object.prototype.propertyIsEnumerable.call(e,n[s])&&(i[n[s]]=e[n[s]])}}(e,["signature"]),!(!t||!t.startsWith("promethios-sig-"))}verifyMerkleRoot(e){return!!e.merkleRoot&&e.merkleRoot.startsWith("merkle-")}createMockToken(e){const t={agentId:e,issuedAt:Date.now(),expiresAt:Date.now()+864e5,issuer:"promethios-core",permissions:["display","monitor","explain"],governanceProfile:"standard",scorecardHash:`hash-${Math.random().toString(36).substring(2)}`,signature:`promethios-sig-${Math.random().toString(36).substring(2)}`};return this.deploymentTokens.set(e,t),t}createMockManifest(e){const t={agentId:e,version:"1.0.0",observers:["prism","vigil"],governanceProfile:"standard",merkleRoot:`merkle-${Math.random().toString(36).substring(2)}`,lastUpdated:Date.now()};return this.manifestCache.set(e,t),t}getVerificationStatus(e){return this.verificationStatus.get(e)||"unverifiable"}isAgentVerified(e){return"verified"===this.getVerificationStatus(e)}getVerificationDetails(e){const t=this.deploymentTokens.get(e),i=this.manifestCache.get(e);return{agentId:e,status:this.getVerificationStatus(e),verifiedAt:Date.now(),token:t?{issuedAt:t.issuedAt,expiresAt:t.expiresAt,issuer:t.issuer,permissions:t.permissions,governanceProfile:t.governanceProfile}:null,manifest:i?{version:i.version,observers:i.observers,governanceProfile:i.governanceProfile,lastUpdated:i.lastUpdated}:null}}registerDeploymentToken(e){const t=this.verifyDeploymentToken(e);return t&&this.deploymentTokens.set(e.agentId,e),t}}const o=a}}]);