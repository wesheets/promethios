"""
GraphQL schema for Promethios Governance API.

This schema defines the GraphQL types, queries, mutations, and subscriptions
for interacting with the Promethios governance system.
"""

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"""
Root query type for retrieving data from the Promethios governance system.
"""
type Query {
  # Memory API queries
  memoryRecord(recordId: ID!): MemoryRecord
  memoryRecords(filter: MemoryRecordFilter, pagination: PaginationInput): MemoryRecordConnection!
  memoryQuery(query: MemoryQueryInput!): MemoryRecordConnection!
  memoryAuditLogs(filter: AuditLogFilter, pagination: PaginationInput): AuditLogConnection!
  
  # Policy API queries
  policy(policyId: ID!, version: String): Policy
  policies(filter: PolicyFilter, pagination: PaginationInput): PolicyConnection!
  policyRule(policyId: ID!, ruleId: ID!, version: String): PolicyRule
  policyRules(policyId: ID!, version: String): [PolicyRule!]!
  policyVersions(policyId: ID!): [PolicyVersion!]!
  
  # Reflection API queries
  reflectionRecord(recordId: ID!): ReflectionRecord
  reflectionRecords(filter: ReflectionRecordFilter, pagination: PaginationInput): ReflectionRecordConnection!
  reflectionInsights(filter: InsightFilter, pagination: PaginationInput): InsightConnection!
  
  # Loop API queries
  loopStatus: LoopStatus!
  loopEvents(filter: LoopEventFilter, pagination: PaginationInput): LoopEventConnection!
  loopMetrics(timeframe: TimeframeInput): LoopMetrics!
  
  # Trust API queries
  trustScore(entityId: ID!): TrustScore
  trustScores(filter: TrustScoreFilter, pagination: PaginationInput): TrustScoreConnection!
  trustEvents(filter: TrustEventFilter, pagination: PaginationInput): TrustEventConnection!
  
  # Override API queries
  overrideRequest(requestId: ID!): OverrideRequest
  overrideRequests(filter: OverrideRequestFilter, pagination: PaginationInput): OverrideRequestConnection!
  
  # Audit API queries
  auditRecord(recordId: ID!): AuditRecord
  auditRecords(filter: AuditRecordFilter, pagination: PaginationInput): AuditRecordConnection!
  auditReport(reportId: ID!): AuditReport
  auditReports(filter: AuditReportFilter, pagination: PaginationInput): AuditReportConnection!
}

"""
Root mutation type for modifying data in the Promethios governance system.
"""
type Mutation {
  # Memory API mutations
  createMemoryRecord(input: CreateMemoryRecordInput!): CreateMemoryRecordPayload!
  updateMemoryRecord(input: UpdateMemoryRecordInput!): UpdateMemoryRecordPayload!
  deleteMemoryRecord(input: DeleteMemoryRecordInput!): DeleteMemoryRecordPayload!
  
  # Policy API mutations
  createPolicy(input: CreatePolicyInput!): CreatePolicyPayload!
  updatePolicy(input: UpdatePolicyInput!): UpdatePolicyPayload!
  deletePolicy(input: DeletePolicyInput!): DeletePolicyPayload!
  addPolicyRule(input: AddPolicyRuleInput!): AddPolicyRulePayload!
  updatePolicyRule(input: UpdatePolicyRuleInput!): UpdatePolicyRulePayload!
  deletePolicyRule(input: DeletePolicyRuleInput!): DeletePolicyRulePayload!
  activatePolicy(input: ActivatePolicyInput!): ActivatePolicyPayload!
  deprecatePolicy(input: DeprecatePolicyInput!): DeprecatePolicyPayload!
  evaluatePolicy(input: EvaluatePolicyInput!): EvaluatePolicyPayload!
  
  # Reflection API mutations
  createReflectionRecord(input: CreateReflectionRecordInput!): CreateReflectionRecordPayload!
  updateReflectionRecord(input: UpdateReflectionRecordInput!): UpdateReflectionRecordPayload!
  triggerReflection(input: TriggerReflectionInput!): TriggerReflectionPayload!
  
  # Loop API mutations
  startLoop(input: StartLoopInput!): StartLoopPayload!
  stopLoop(input: StopLoopInput!): StopLoopPayload!
  pauseLoop(input: PauseLoopInput!): PauseLoopPayload!
  resumeLoop(input: ResumeLoopInput!): ResumeLoopPayload!
  
  # Trust API mutations
  updateTrustScore(input: UpdateTrustScoreInput!): UpdateTrustScorePayload!
  recordTrustEvent(input: RecordTrustEventInput!): RecordTrustEventPayload!
  
  # Override API mutations
  createOverrideRequest(input: CreateOverrideRequestInput!): CreateOverrideRequestPayload!
  approveOverrideRequest(input: ApproveOverrideRequestInput!): ApproveOverrideRequestPayload!
  rejectOverrideRequest(input: RejectOverrideRequestInput!): RejectOverrideRequestPayload!
  
  # Audit API mutations
  createAuditRecord(input: CreateAuditRecordInput!): CreateAuditRecordPayload!
  generateAuditReport(input: GenerateAuditReportInput!): GenerateAuditReportPayload!
}

"""
Root subscription type for receiving real-time updates from the Promethios governance system.
"""
type Subscription {
  # Memory API subscriptions
  memoryRecordCreated(filter: MemoryRecordFilter): MemoryRecord!
  memoryRecordUpdated(filter: MemoryRecordFilter): MemoryRecord!
  memoryRecordDeleted(filter: MemoryRecordFilter): ID!
  
  # Policy API subscriptions
  policyCreated(filter: PolicyFilter): Policy!
  policyUpdated(filter: PolicyFilter): Policy!
  policyDeleted(filter: PolicyFilter): ID!
  policyActivated(filter: PolicyFilter): Policy!
  policyDeprecated(filter: PolicyFilter): Policy!
  
  # Reflection API subscriptions
  reflectionRecordCreated(filter: ReflectionRecordFilter): ReflectionRecord!
  reflectionTriggered(filter: ReflectionRecordFilter): ReflectionRecord!
  reflectionCompleted(filter: ReflectionRecordFilter): ReflectionRecord!
  
  # Loop API subscriptions
  loopStatusChanged: LoopStatus!
  loopEventOccurred(filter: LoopEventFilter): LoopEvent!
  
  # Trust API subscriptions
  trustScoreChanged(filter: TrustScoreFilter): TrustScore!
  trustEventOccurred(filter: TrustEventFilter): TrustEvent!
  
  # Override API subscriptions
  overrideRequestCreated(filter: OverrideRequestFilter): OverrideRequest!
  overrideRequestStatusChanged(filter: OverrideRequestFilter): OverrideRequest!
  
  # Audit API subscriptions
  auditRecordCreated(filter: AuditRecordFilter): AuditRecord!
  auditReportGenerated(filter: AuditReportFilter): AuditReport!
}

# Memory API types

"""
A record in the governance memory system.
"""
type MemoryRecord {
  recordId: ID!
  timestamp: DateTime!
  source: String!
  recordType: MemoryRecordType!
  content: JSONObject!
  metadata: JSONObject
  version: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String!
  updatedBy: String
}

"""
Connection type for paginated memory records.
"""
type MemoryRecordConnection {
  edges: [MemoryRecordEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for memory record connections.
"""
type MemoryRecordEdge {
  node: MemoryRecord!
  cursor: String!
}

"""
Types of memory records.
"""
enum MemoryRecordType {
  DECISION
  EVENT
  POLICY
  REFLECTION
}

"""
Input type for filtering memory records.
"""
input MemoryRecordFilter {
  recordType: MemoryRecordType
  source: String
  timeRange: TimeRangeInput
  contentQuery: JSONObject
  metadataQuery: JSONObject
}

"""
Input type for creating a memory record.
"""
input CreateMemoryRecordInput {
  source: String!
  recordType: MemoryRecordType!
  content: JSONObject!
  metadata: JSONObject
}

"""
Payload for creating a memory record.
"""
type CreateMemoryRecordPayload {
  record: MemoryRecord!
}

"""
Input type for updating a memory record.
"""
input UpdateMemoryRecordInput {
  recordId: ID!
  content: JSONObject
  metadata: JSONObject
}

"""
Payload for updating a memory record.
"""
type UpdateMemoryRecordPayload {
  record: MemoryRecord!
}

"""
Input type for deleting a memory record.
"""
input DeleteMemoryRecordInput {
  recordId: ID!
}

"""
Payload for deleting a memory record.
"""
type DeleteMemoryRecordPayload {
  recordId: ID!
  success: Boolean!
}

"""
Input type for querying memory records.
"""
input MemoryQueryInput {
  filters: MemoryRecordFilter
  sort: SortInput
  pagination: PaginationInput
}

# Policy API types

"""
A governance policy.
"""
type Policy {
  policyId: ID!
  name: String!
  version: String!
  status: PolicyStatus!
  category: String
  description: String
  rules: [PolicyRule!]!
  metadata: JSONObject
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: String!
  updatedBy: String
}

"""
Connection type for paginated policies.
"""
type PolicyConnection {
  edges: [PolicyEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for policy connections.
"""
type PolicyEdge {
  node: Policy!
  cursor: String!
}

"""
A rule within a governance policy.
"""
type PolicyRule {
  ruleId: ID!
  name: String
  description: String
  condition: String!
  action: PolicyAction!
  priority: Int
  metadata: JSONObject
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A version of a governance policy.
"""
type PolicyVersion {
  version: String!
  status: PolicyStatus!
  createdAt: DateTime!
  createdBy: String!
  notes: String
}

"""
Status of a policy.
"""
enum PolicyStatus {
  DRAFT
  ACTIVE
  DEPRECATED
  ARCHIVED
}

"""
Action to take when a policy rule condition is met.
"""
enum PolicyAction {
  ALLOW
  DENY
  LOG
  ALERT
  ESCALATE
}

"""
Input type for filtering policies.
"""
input PolicyFilter {
  status: PolicyStatus
  category: String
  owner: String
}

"""
Input type for creating a policy.
"""
input CreatePolicyInput {
  name: String!
  category: String
  description: String
  rules: [PolicyRuleInput!]!
  metadata: JSONObject
}

"""
Payload for creating a policy.
"""
type CreatePolicyPayload {
  policy: Policy!
}

"""
Input type for updating a policy.
"""
input UpdatePolicyInput {
  policyId: ID!
  name: String
  category: String
  description: String
  metadata: JSONObject
}

"""
Payload for updating a policy.
"""
type UpdatePolicyPayload {
  policy: Policy!
}

"""
Input type for deleting a policy.
"""
input DeletePolicyInput {
  policyId: ID!
}

"""
Payload for deleting a policy.
"""
type DeletePolicyPayload {
  policyId: ID!
  success: Boolean!
}

"""
Input type for creating a policy rule.
"""
input PolicyRuleInput {
  name: String
  description: String
  condition: String!
  action: PolicyAction!
  priority: Int
  metadata: JSONObject
}

"""
Input type for adding a rule to a policy.
"""
input AddPolicyRuleInput {
  policyId: ID!
  rule: PolicyRuleInput!
}

"""
Payload for adding a rule to a policy.
"""
type AddPolicyRulePayload {
  policy: Policy!
  rule: PolicyRule!
}

"""
Input type for updating a policy rule.
"""
input UpdatePolicyRuleInput {
  policyId: ID!
  ruleId: ID!
  name: String
  description: String
  condition: String
  action: PolicyAction
  priority: Int
  metadata: JSONObject
}

"""
Payload for updating a policy rule.
"""
type UpdatePolicyRulePayload {
  policy: Policy!
  rule: PolicyRule!
}

"""
Input type for deleting a policy rule.
"""
input DeletePolicyRuleInput {
  policyId: ID!
  ruleId: ID!
}

"""
Payload for deleting a policy rule.
"""
type DeletePolicyRulePayload {
  policyId: ID!
  ruleId: ID!
  success: Boolean!
}

"""
Input type for activating a policy.
"""
input ActivatePolicyInput {
  policyId: ID!
  version: String
  notes: String
}

"""
Payload for activating a policy.
"""
type ActivatePolicyPayload {
  policy: Policy!
}

"""
Input type for deprecating a policy.
"""
input DeprecatePolicyInput {
  policyId: ID!
  reason: String!
  replacementPolicyId: ID
}

"""
Payload for deprecating a policy.
"""
type DeprecatePolicyPayload {
  policy: Policy!
}

"""
Input type for evaluating policies.
"""
input EvaluatePolicyInput {
  policyIds: [ID!]
  context: JSONObject!
  trace: Boolean
}

"""
Payload for policy evaluation.
"""
type EvaluatePolicyPayload {
  decision: PolicyDecision!
  reason: String
  evaluatedPolicies: [PolicyEvaluationResult!]!
  trace: [PolicyEvaluationTrace!]
}

"""
Result of policy evaluation.
"""
type PolicyEvaluationResult {
  policyId: ID!
  policyName: String!
  version: String!
  decision: PolicyDecision!
  matchedRules: [MatchedPolicyRule!]!
}

"""
A rule that matched during policy evaluation.
"""
type MatchedPolicyRule {
  ruleId: ID!
  action: PolicyAction!
}

"""
Trace of policy evaluation.
"""
type PolicyEvaluationTrace {
  timestamp: DateTime!
  policyId: ID!
  ruleId: ID!
  condition: String!
  result: Boolean!
  contextValues: JSONObject!
}

"""
Decision from policy evaluation.
"""
enum PolicyDecision {
  ALLOW
  DENY
  NOT_APPLICABLE
  ERROR
}

# Reflection API types

"""
A reflection record in the governance system.
"""
type ReflectionRecord {
  recordId: ID!
  timestamp: DateTime!
  reflectionType: ReflectionType!
  trigger: ReflectionTrigger!
  status: ReflectionStatus!
  inputs: JSONObject!
  outputs: JSONObject
  insights: [Insight!]
  metadata: JSONObject
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Connection type for paginated reflection records.
"""
type ReflectionRecordConnection {
  edges: [ReflectionRecordEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for reflection record connections.
"""
type ReflectionRecordEdge {
  node: ReflectionRecord!
  cursor: String!
}

"""
An insight derived from reflection.
"""
type Insight {
  insightId: ID!
  reflectionId: ID!
  timestamp: DateTime!
  category: InsightCategory!
  severity: InsightSeverity!
  description: String!
  evidence: JSONObject!
  recommendations: [String!]
  metadata: JSONObject
}

"""
Connection type for paginated insights.
"""
type InsightConnection {
  edges: [InsightEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for insight connections.
"""
type InsightEdge {
  node: Insight!
  cursor: String!
}

"""
Type of reflection.
"""
enum ReflectionType {
  POLICY_EFFECTIVENESS
  DECISION_QUALITY
  SYSTEM_HEALTH
  COMPLIANCE
  ANOMALY_DETECTION
}

"""
Trigger for reflection.
"""
enum ReflectionTrigger {
  SCHEDULED
  EVENT_BASED
  MANUAL
  THRESHOLD_BREACH
}

"""
Status of reflection.
"""
enum ReflectionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

"""
Category of insight.
"""
enum InsightCategory {
  POLICY_GAP
  DECISION_PATTERN
  COMPLIANCE_ISSUE
  PERFORMANCE_BOTTLENECK
  SECURITY_CONCERN
  OPTIMIZATION_OPPORTUNITY
}

"""
Severity of insight.
"""
enum InsightSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

"""
Input type for filtering reflection records.
"""
input ReflectionRecordFilter {
  reflectionType: ReflectionType
  trigger: ReflectionTrigger
  status: ReflectionStatus
  timeRange: TimeRangeInput
}

"""
Input type for filtering insights.
"""
input InsightFilter {
  reflectionId: ID
  category: InsightCategory
  severity: InsightSeverity
  timeRange: TimeRangeInput
}

"""
Input type for creating a reflection record.
"""
input CreateReflectionRecordInput {
  reflectionType: ReflectionType!
  trigger: ReflectionTrigger!
  inputs: JSONObject!
  metadata: JSONObject
}

"""
Payload for creating a reflection record.
"""
type CreateReflectionRecordPayload {
  record: ReflectionRecord!
}

"""
Input type for updating a reflection record.
"""
input UpdateReflectionRecordInput {
  recordId: ID!
  status: ReflectionStatus
  outputs: JSONObject
  metadata: JSONObject
}

"""
Payload for updating a reflection record.
"""
type UpdateReflectionRecordPayload {
  record: ReflectionRecord!
}

"""
Input type for triggering reflection.
"""
input TriggerReflectionInput {
  reflectionType: ReflectionType!
  inputs: JSONObject!
  metadata: JSONObject
}

"""
Payload for triggering reflection.
"""
type TriggerReflectionPayload {
  record: ReflectionRecord!
}

# Loop API types

"""
Status of the governance loop.
"""
type LoopStatus {
  state: LoopState!
  currentPhase: LoopPhase
  startTime: DateTime
  lastUpdateTime: DateTime
  metrics: LoopMetrics
  activeReflections: Int!
  pendingDecisions: Int!
}

"""
Metrics for the governance loop.
"""
type LoopMetrics {
  timeframe: Timeframe!
  decisionsProcessed: Int!
  policiesEvaluated: Int!
  reflectionsTriggered: Int!
  insightsGenerated: Int!
  averageDecisionTime: Float!
  averageReflectionTime: Float!
  policyEffectivenessScore: Float!
}

"""
An event in the governance loop.
"""
type LoopEvent {
  eventId: ID!
  timestamp: DateTime!
  eventType: LoopEventType!
  phase: LoopPhase!
  description: String!
  details: JSONObject
  relatedEntityId: ID
  relatedEntityType: String
}

"""
Connection type for paginated loop events.
"""
type LoopEventConnection {
  edges: [LoopEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for loop event connections.
"""
type LoopEventEdge {
  node: LoopEvent!
  cursor: String!
}

"""
State of the governance loop.
"""
enum LoopState {
  RUNNING
  PAUSED
  STOPPED
  ERROR
}

"""
Phase of the governance loop.
"""
enum LoopPhase {
  OBSERVATION
  ORIENTATION
  DECISION
  ACTION
  REFLECTION
}

"""
Type of loop event.
"""
enum LoopEventType {
  PHASE_CHANGE
  DECISION_MADE
  POLICY_APPLIED
  REFLECTION_STARTED
  REFLECTION_COMPLETED
  ERROR_OCCURRED
  SYSTEM_ALERT
}

"""
Input type for filtering loop events.
"""
input LoopEventFilter {
  eventType: LoopEventType
  phase: LoopPhase
  timeRange: TimeRangeInput
  relatedEntityId: ID
  relatedEntityType: String
}

"""
Input type for specifying a timeframe.
"""
input TimeframeInput {
  start: DateTime!
  end: DateTime!
}

"""
A timeframe.
"""
type Timeframe {
  start: DateTime!
  end: DateTime!
  duration: Int!
}

"""
Input type for starting the governance loop.
"""
input StartLoopInput {
  initialPhase: LoopPhase
  configuration: JSONObject
}

"""
Payload for starting the governance loop.
"""
type StartLoopPayload {
  status: LoopStatus!
}

"""
Input type for stopping the governance loop.
"""
input StopLoopInput {
  reason: String
}

"""
Payload for stopping the governance loop.
"""
type StopLoopPayload {
  status: LoopStatus!
}

"""
Input type for pausing the governance loop.
"""
input PauseLoopInput {
  reason: String
}

"""
Payload for pausing the governance loop.
"""
type PauseLoopPayload {
  status: LoopStatus!
}

"""
Input type for resuming the governance loop.
"""
input ResumeLoopInput {
  configuration: JSONObject
}

"""
Payload for resuming the governance loop.
"""
type ResumeLoopPayload {
  status: LoopStatus!
}

# Trust API types

"""
A trust score for an entity.
"""
type TrustScore {
  entityId: ID!
  entityType: String!
  score: Float!
  confidence: Float!
  components: [TrustComponent!]!
  lastUpdated: DateTime!
  history: [TrustScoreHistory!]!
  metadata: JSONObject
}

"""
Connection type for paginated trust scores.
"""
type TrustScoreConnection {
  edges: [TrustScoreEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for trust score connections.
"""
type TrustScoreEdge {
  node: TrustScore!
  cursor: String!
}

"""
A component of a trust score.
"""
type TrustComponent {
  componentId: ID!
  name: String!
  score: Float!
  weight: Float!
  description: String
}

"""
Historical trust score.
"""
type TrustScoreHistory {
  timestamp: DateTime!
  score: Float!
  confidence: Float!
  reason: String
}

"""
A trust-related event.
"""
type TrustEvent {
  eventId: ID!
  timestamp: DateTime!
  entityId: ID!
  entityType: String!
  eventType: TrustEventType!
  impact: TrustImpact!
  description: String!
  evidence: JSONObject!
  metadata: JSONObject
}

"""
Connection type for paginated trust events.
"""
type TrustEventConnection {
  edges: [TrustEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for trust event connections.
"""
type TrustEventEdge {
  node: TrustEvent!
  cursor: String!
}

"""
Type of trust event.
"""
enum TrustEventType {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  POLICY_VIOLATION
  ANOMALOUS_BEHAVIOR
  COMPLIANCE_VERIFICATION
  EXTERNAL_VALIDATION
}

"""
Impact of a trust event on trust score.
"""
enum TrustImpact {
  POSITIVE
  NEUTRAL
  NEGATIVE
  CRITICAL
}

"""
Input type for filtering trust scores.
"""
input TrustScoreFilter {
  entityType: String
  scoreRange: FloatRangeInput
  confidenceRange: FloatRangeInput
  lastUpdatedRange: TimeRangeInput
}

"""
Input type for filtering trust events.
"""
input TrustEventFilter {
  entityId: ID
  entityType: String
  eventType: TrustEventType
  impact: TrustImpact
  timeRange: TimeRangeInput
}

"""
Input type for updating a trust score.
"""
input UpdateTrustScoreInput {
  entityId: ID!
  entityType: String!
  score: Float
  confidence: Float
  components: [TrustComponentInput!]
  reason: String!
  metadata: JSONObject
}

"""
Input type for a trust component.
"""
input TrustComponentInput {
  componentId: ID!
  score: Float!
  weight: Float
}

"""
Payload for updating a trust score.
"""
type UpdateTrustScorePayload {
  trustScore: TrustScore!
}

"""
Input type for recording a trust event.
"""
input RecordTrustEventInput {
  entityId: ID!
  entityType: String!
  eventType: TrustEventType!
  impact: TrustImpact!
  description: String!
  evidence: JSONObject!
  metadata: JSONObject
}

"""
Payload for recording a trust event.
"""
type RecordTrustEventPayload {
  trustEvent: TrustEvent!
  trustScore: TrustScore
}

# Override API types

"""
A request to override a governance decision.
"""
type OverrideRequest {
  requestId: ID!
  timestamp: DateTime!
  requestor: String!
  decisionId: String!
  originalDecision: PolicyDecision!
  requestedDecision: PolicyDecision!
  justification: String!
  status: OverrideStatus!
  reviewerId: String
  reviewNotes: String
  reviewTimestamp: DateTime
  expirationTime: DateTime
  metadata: JSONObject
}

"""
Connection type for paginated override requests.
"""
type OverrideRequestConnection {
  edges: [OverrideRequestEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for override request connections.
"""
type OverrideRequestEdge {
  node: OverrideRequest!
  cursor: String!
}

"""
Status of an override request.
"""
enum OverrideStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  CANCELLED
}

"""
Input type for filtering override requests.
"""
input OverrideRequestFilter {
  requestor: String
  status: OverrideStatus
  timeRange: TimeRangeInput
  decisionId: String
}

"""
Input type for creating an override request.
"""
input CreateOverrideRequestInput {
  decisionId: String!
  originalDecision: PolicyDecision!
  requestedDecision: PolicyDecision!
  justification: String!
  expirationTime: DateTime
  metadata: JSONObject
}

"""
Payload for creating an override request.
"""
type CreateOverrideRequestPayload {
  request: OverrideRequest!
}

"""
Input type for approving an override request.
"""
input ApproveOverrideRequestInput {
  requestId: ID!
  reviewNotes: String
  expirationTime: DateTime
}

"""
Payload for approving an override request.
"""
type ApproveOverrideRequestPayload {
  request: OverrideRequest!
}

"""
Input type for rejecting an override request.
"""
input RejectOverrideRequestInput {
  requestId: ID!
  reviewNotes: String!
}

"""
Payload for rejecting an override request.
"""
type RejectOverrideRequestPayload {
  request: OverrideRequest!
}

# Audit API types

"""
An audit record in the governance system.
"""
type AuditRecord {
  recordId: ID!
  timestamp: DateTime!
  actorId: String!
  actorType: String!
  action: String!
  resourceId: String
  resourceType: String
  outcome: AuditOutcome!
  details: JSONObject!
  metadata: JSONObject
}

"""
Connection type for paginated audit records.
"""
type AuditRecordConnection {
  edges: [AuditRecordEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for audit record connections.
"""
type AuditRecordEdge {
  node: AuditRecord!
  cursor: String!
}

"""
An audit log entry.
"""
type AuditLog {
  logId: ID!
  timestamp: DateTime!
  operation: AuditOperation!
  userId: String!
  recordId: String
  details: JSONObject
}

"""
Connection type for paginated audit logs.
"""
type AuditLogConnection {
  edges: [AuditLogEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for audit log connections.
"""
type AuditLogEdge {
  node: AuditLog!
  cursor: String!
}

"""
An audit report.
"""
type AuditReport {
  reportId: ID!
  name: String!
  description: String
  timeRange: Timeframe!
  generatedAt: DateTime!
  generatedBy: String!
  reportType: AuditReportType!
  format: String!
  url: String!
  summary: JSONObject!
  metadata: JSONObject
}

"""
Connection type for paginated audit reports.
"""
type AuditReportConnection {
  edges: [AuditReportEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Edge type for audit report connections.
"""
type AuditReportEdge {
  node: AuditReport!
  cursor: String!
}

"""
Outcome of an audited action.
"""
enum AuditOutcome {
  SUCCESS
  FAILURE
  ERROR
  DENIED
}

"""
Type of audit operation.
"""
enum AuditOperation {
  CREATE
  READ
  UPDATE
  DELETE
  QUERY
}

"""
Type of audit report.
"""
enum AuditReportType {
  ACTIVITY
  COMPLIANCE
  SECURITY
  PERFORMANCE
  CUSTOM
}

"""
Input type for filtering audit records.
"""
input AuditRecordFilter {
  actorId: String
  actorType: String
  action: String
  resourceId: String
  resourceType: String
  outcome: AuditOutcome
  timeRange: TimeRangeInput
}

"""
Input type for filtering audit logs.
"""
input AuditLogFilter {
  userId: String
  operation: AuditOperation
  recordId: String
  timeRange: TimeRangeInput
}

"""
Input type for filtering audit reports.
"""
input AuditReportFilter {
  reportType: AuditReportType
  timeRange: TimeRangeInput
  generatedBy: String
}

"""
Input type for creating an audit record.
"""
input CreateAuditRecordInput {
  actorId: String!
  actorType: String!
  action: String!
  resourceId: String
  resourceType: String
  outcome: AuditOutcome!
  details: JSONObject!
  metadata: JSONObject
}

"""
Payload for creating an audit record.
"""
type CreateAuditRecordPayload {
  record: AuditRecord!
}

"""
Input type for generating an audit report.
"""
input GenerateAuditReportInput {
  name: String!
  description: String
  timeRange: TimeframeInput!
  reportType: AuditReportType!
  format: String!
  filters: JSONObject
  metadata: JSONObject
}

"""
Payload for generating an audit report.
"""
type GenerateAuditReportPayload {
  report: AuditReport!
}

# Common types

"""
Information about pagination.
"""
type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

"""
Input type for pagination.
"""
input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

"""
Input type for sorting.
"""
input SortInput {
  field: String!
  order: SortOrder! = DESC
}

"""
Sort order.
"""
enum SortOrder {
  ASC
  DESC
}

"""
Input type for a time range.
"""
input TimeRangeInput {
  start: DateTime
  end: DateTime
}

"""
Input type for a float range.
"""
input FloatRangeInput {
  min: Float
  max: Float
}

"""
A date and time.
"""
scalar DateTime

"""
A JSON object.
"""
scalar JSONObject
