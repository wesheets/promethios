openapi: 3.0.0
info:
  title: Promethios Memory API
  description: |
    The Memory API provides access to the governance memory system of Promethios.
    It allows retrieval, storage, and querying of governance decisions, events, and records.
  version: 1.0.0
  contact:
    name: Promethios Support
    url: https://promethios.ai/support
    email: support@promethios.ai
  license:
    name: Proprietary
    url: https://promethios.ai/license

servers:
  - url: https://api.promethios.ai/v1
    description: Production API server
  - url: https://staging-api.promethios.ai/v1
    description: Staging API server
  - url: https://dev-api.promethios.ai/v1
    description: Development API server

tags:
  - name: Memory
    description: Operations related to governance memory
  - name: Records
    description: Operations for managing memory records
  - name: Query
    description: Operations for querying memory
  - name: Audit
    description: Operations for auditing memory access

paths:
  /memory/records:
    get:
      summary: List memory records
      description: Retrieves a list of memory records based on query parameters
      operationId: listMemoryRecords
      tags:
        - Memory
        - Records
      parameters:
        - name: record_type
          in: query
          description: Filter by record type
          schema:
            type: string
            enum: [decision, event, policy, reflection]
        - name: source
          in: query
          description: Filter by source system
          schema:
            type: string
        - name: start_time
          in: query
          description: Filter by start timestamp (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: Filter by end timestamp (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: limit
          in: query
          description: Maximum number of records to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of records to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemoryRecord'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:read]
    
    post:
      summary: Create a memory record
      description: Creates a new memory record in the governance memory system
      operationId: createMemoryRecord
      tags:
        - Memory
        - Records
      requestBody:
        description: Memory record to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryRecordCreate'
      responses:
        '201':
          description: Record created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Conflict - record already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:write]

  /memory/records/{record_id}:
    get:
      summary: Get a memory record
      description: Retrieves a specific memory record by ID
      operationId: getMemoryRecord
      tags:
        - Memory
        - Records
      parameters:
        - name: record_id
          in: path
          description: Unique identifier of the memory record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:read]
    
    put:
      summary: Update a memory record
      description: Updates an existing memory record
      operationId: updateMemoryRecord
      tags:
        - Memory
        - Records
      parameters:
        - name: record_id
          in: path
          description: Unique identifier of the memory record
          required: true
          schema:
            type: string
      requestBody:
        description: Updated memory record
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryRecordUpdate'
      responses:
        '200':
          description: Record updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MemoryRecord'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:write]
    
    delete:
      summary: Delete a memory record
      description: Deletes a specific memory record by ID
      operationId: deleteMemoryRecord
      tags:
        - Memory
        - Records
      parameters:
        - name: record_id
          in: path
          description: Unique identifier of the memory record
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Record deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:delete]

  /memory/query:
    post:
      summary: Query memory records
      description: Performs a complex query on memory records
      operationId: queryMemoryRecords
      tags:
        - Memory
        - Query
      requestBody:
        description: Query parameters
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemoryQuery'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  records:
                    type: array
                    items:
                      $ref: '#/components/schemas/MemoryRecord'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:read]

  /memory/audit:
    get:
      summary: Get memory audit logs
      description: Retrieves audit logs for memory operations
      operationId: getMemoryAuditLogs
      tags:
        - Memory
        - Audit
      parameters:
        - name: start_time
          in: query
          description: Filter by start timestamp (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          description: Filter by end timestamp (ISO 8601 format)
          schema:
            type: string
            format: date-time
        - name: user_id
          in: query
          description: Filter by user ID
          schema:
            type: string
        - name: operation
          in: query
          description: Filter by operation type
          schema:
            type: string
            enum: [create, read, update, delete, query]
        - name: record_id
          in: query
          description: Filter by record ID
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of logs to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of logs to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  audit_logs:
                    type: array
                    items:
                      $ref: '#/components/schemas/AuditLog'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - ApiKeyAuth: []
        - OAuth2: [memory:audit]

components:
  schemas:
    MemoryRecord:
      type: object
      required:
        - record_id
        - timestamp
        - source
        - record_type
        - content
      properties:
        record_id:
          type: string
          description: Unique identifier for the memory record
          example: "mem-12345"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the record was created
          example: "2025-05-22T10:30:00Z"
        source:
          type: string
          description: Source system that created the record
          example: "governance-engine"
        record_type:
          type: string
          description: Type of memory record
          enum: [decision, event, policy, reflection]
          example: "decision"
        content:
          type: object
          description: Content of the memory record
          example:
            decision_id: "dec-6789"
            policy_id: "pol-1234"
            action: "approve"
        metadata:
          type: object
          description: Additional metadata for the record
          example:
            priority: "high"
            tags: ["governance", "access-control"]
        version:
          type: integer
          description: Version number of the record
          example: 1
        created_at:
          type: string
          format: date-time
          description: Timestamp when the record was created
          example: "2025-05-22T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the record was last updated
          example: "2025-05-22T10:30:00Z"
        created_by:
          type: string
          description: ID of the user or system that created the record
          example: "system-governance"
        updated_by:
          type: string
          description: ID of the user or system that last updated the record
          example: "system-governance"

    MemoryRecordCreate:
      type: object
      required:
        - source
        - record_type
        - content
      properties:
        source:
          type: string
          description: Source system creating the record
          example: "governance-engine"
        record_type:
          type: string
          description: Type of memory record
          enum: [decision, event, policy, reflection]
          example: "decision"
        content:
          type: object
          description: Content of the memory record
          example:
            decision_id: "dec-6789"
            policy_id: "pol-1234"
            action: "approve"
        metadata:
          type: object
          description: Additional metadata for the record
          example:
            priority: "high"
            tags: ["governance", "access-control"]

    MemoryRecordUpdate:
      type: object
      properties:
        content:
          type: object
          description: Updated content of the memory record
          example:
            decision_id: "dec-6789"
            policy_id: "pol-1234"
            action: "approve"
            reason: "Meets security requirements"
        metadata:
          type: object
          description: Updated metadata for the record
          example:
            priority: "high"
            tags: ["governance", "access-control", "approved"]

    MemoryQuery:
      type: object
      properties:
        filters:
          type: object
          description: Query filters
          properties:
            record_types:
              type: array
              items:
                type: string
                enum: [decision, event, policy, reflection]
              description: Types of records to include
              example: ["decision", "policy"]
            sources:
              type: array
              items:
                type: string
              description: Sources to include
              example: ["governance-engine", "policy-engine"]
            time_range:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                  description: Start of time range
                  example: "2025-05-01T00:00:00Z"
                end:
                  type: string
                  format: date-time
                  description: End of time range
                  example: "2025-05-22T23:59:59Z"
            content_query:
              type: object
              description: Query for record content
              example:
                policy_id: "pol-1234"
            metadata_query:
              type: object
              description: Query for record metadata
              example:
                tags: ["governance"]
        sort:
          type: object
          properties:
            field:
              type: string
              description: Field to sort by
              enum: [timestamp, record_type, source]
              default: timestamp
              example: "timestamp"
            order:
              type: string
              description: Sort order
              enum: [asc, desc]
              default: desc
              example: "desc"
        pagination:
          type: object
          properties:
            limit:
              type: integer
              description: Maximum number of records to return
              minimum: 1
              maximum: 100
              default: 20
              example: 20
            offset:
              type: integer
              description: Number of records to skip
              minimum: 0
              default: 0
              example: 0

    AuditLog:
      type: object
      required:
        - log_id
        - timestamp
        - operation
        - user_id
      properties:
        log_id:
          type: string
          description: Unique identifier for the audit log
          example: "audit-12345"
        timestamp:
          type: string
          format: date-time
          description: Timestamp when the operation occurred
          example: "2025-05-22T10:35:00Z"
        operation:
          type: string
          description: Type of operation
          enum: [create, read, update, delete, query]
          example: "read"
        user_id:
          type: string
          description: ID of the user or system that performed the operation
          example: "user-789"
        record_id:
          type: string
          description: ID of the affected record (if applicable)
          example: "mem-12345"
        details:
          type: object
          description: Additional details about the operation
          example:
            ip_address: "192.168.1.100"
            user_agent: "Mozilla/5.0"
            query_params: {"record_type": "decision"}

    Pagination:
      type: object
      properties:
        total:
          type: integer
          description: Total number of records
          example: 42
        limit:
          type: integer
          description: Maximum number of records returned
          example: 20
        offset:
          type: integer
          description: Number of records skipped
          example: 0
        has_more:
          type: boolean
          description: Whether there are more records
          example: true

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          description: Error code
          example: "invalid_request"
        message:
          type: string
          description: Error message
          example: "Invalid request parameters"
        details:
          type: object
          description: Additional error details
          example:
            field: "record_type"
            reason: "Invalid value"

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
    
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://auth.promethios.ai/oauth/token
          scopes:
            memory:read: Read access to memory records
            memory:write: Write access to memory records
            memory:delete: Delete access to memory records
            memory:audit: Access to memory audit logs
