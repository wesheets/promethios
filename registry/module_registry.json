{
  "registry_version": "v2025.05.20",
  "last_updated": "2025-05-20",
  "modules": {
    "governance": {
      "trust_boundary_manager": {
        "path": "src/core/governance/trust_boundary_manager.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.6",
        "schemas": ["trust_boundary.schema.v1.json"],
        "depends_on": ["governance_mesh_integration.py"],
        "purpose": "Define and enforce trust boundaries between Promethios instances"
      },
      "trust_surface_protocol": {
        "path": "src/core/governance/trust_surface_protocol.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.6",
        "schemas": ["trust_surface_protocol.schema.v1.json"],
        "depends_on": ["trust_boundary_manager.py"],
        "purpose": "Define communication protocol for trust surface interactions"
      },
      "attestation_service": {
        "path": "src/core/governance/attestation_service.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.6",
        "schemas": ["trust_attestation.schema.v1.json"],
        "depends_on": ["trust_boundary_manager.py"],
        "purpose": "Generate and validate trust attestations"
      },
      "trust_propagation_engine": {
        "path": "src/core/governance/trust_propagation_engine.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.6",
        "schemas": ["trust_boundary.schema.v1.json", "trust_attestation.schema.v1.json"],
        "depends_on": ["trust_boundary_manager.py", "attestation_service.py"],
        "purpose": "Manage propagation of trust across distributed network"
      },
      "boundary_enforcement_module": {
        "path": "src/core/governance/boundary_enforcement_module.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.6",
        "schemas": ["trust_boundary.schema.v1.json"],
        "depends_on": ["trust_boundary_manager.py", "attestation_service.py", "trust_propagation_engine.py"],
        "purpose": "Enforce trust boundary policies and access control"
      },
      "contract_sealer": {
        "path": "src/core/governance/contract_sealer.py",
        "codex_contract_version": "v2025.05.20",
        "phase": "5.8",
        "schemas": ["contract_seal.schema.v1.json"],
        "depends_on": [],
        "purpose": "Create and verify cryptographic seals of contracts"
      },
      "evolution_protocol": {
        "path": "src/core/governance/evolution_protocol.py",
        "codex_contract_version": "v2025.05.20",
        "phase": "5.8",
        "schemas": ["evolution_proposal.schema.v1.json", "evolution_record.schema.v1.json"],
        "depends_on": ["contract_sealer.py"],
        "purpose": "Manage the contract evolution process through formal approval"
      },
      "codex_lock": {
        "path": "src/core/governance/codex_lock.py",
        "codex_contract_version": "v2025.05.20",
        "phase": "5.8",
        "schemas": ["contract_seal.schema.v1.json", "evolution_proposal.schema.v1.json", "evolution_record.schema.v1.json"],
        "depends_on": ["contract_sealer.py", "evolution_protocol.py", "src/core/trust/mutation_detector.py"],
        "purpose": "Main implementation of the Codex Mutation Lock system"
      }
    },
    "trust": {
      "trust_surface_analytics": {
        "path": "src/core/trust/trust_surface_analytics.py",
        "codex_contract_version": "v2025.05.19",
        "phase": "5.7",
        "schemas": ["trust_metrics.schema.v1.json", "trust_boundary_alert.schema.v1.json"],
        "depends_on": ["src/core/governance/trust_boundary_manager.py", "src/core/governance/trust_surface_protocol.py"],
        "purpose": "Analyze trust surfaces to generate metrics and detect anomalies"
      },
      "trust_metrics_aggregator": {
        "path": "src/core/trust/trust_metrics_aggregator.py",
        "codex_contract_version": "v2025.05.19",
        "phase": "5.7",
        "schemas": ["trust_metrics.schema.v1.json"],
        "depends_on": ["src/core/trust/trust_surface_analytics.py"],
        "purpose": "Collect and normalize metrics from multiple nodes"
      },
      "mutation_detector": {
        "path": "src/core/trust/mutation_detector.py",
        "codex_contract_version": "v2025.05.20",
        "phase": "5.8",
        "schemas": ["mutation_detection.schema.v1.json"],
        "depends_on": ["src/core/governance/contract_sealer.py"],
        "purpose": "Detect unauthorized modifications to sealed contracts"
      }
    },
    "verification": {
      "seal_verification": {
        "path": "src/core/verification/seal_verification.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.2",
        "schemas": ["replay_verification.schema.v1.json"],
        "depends_on": [],
        "purpose": "Provide cryptographic verification of execution replay logs"
      }
    },
    "visualization": {
      "visualization_data_transformer": {
        "path": "src/core/visualization/visualization_data_transformer.py",
        "codex_contract_version": "v2025.05.19",
        "phase": "5.7",
        "schemas": ["trust_visualization.schema.v1.json"],
        "depends_on": ["src/core/trust/trust_metrics_aggregator.py"],
        "purpose": "Transform trust data into visualization-ready format"
      }
    },
    "ui": {
      "trust_surface_dashboard": {
        "path": "src/ui/trust_surface_dashboard/trust_surface_dashboard.py",
        "codex_contract_version": "v2025.05.19",
        "phase": "5.7",
        "ui_component": "UI-12.66",
        "schemas": ["trust_visualization.schema.v1.json"],
        "depends_on": ["src/core/trust/trust_surface_analytics.py", "src/core/trust/trust_metrics_aggregator.py", "src/core/visualization/visualization_data_transformer.py"],
        "purpose": "Provide interactive visualization of trust surfaces and metrics"
      }
    },
    "integration": {
      "codex_lock_api": {
        "path": "src/integration/codex_lock_api.py",
        "codex_contract_version": "v2025.05.20",
        "phase": "5.8",
        "schemas": ["contract_seal.schema.v1.json", "evolution_proposal.schema.v1.json", "evolution_record.schema.v1.json", "mutation_detection.schema.v1.json"],
        "depends_on": ["src/core/governance/codex_lock.py"],
        "purpose": "API integration for the Codex Mutation Lock system"
      }
    }
  }
}
