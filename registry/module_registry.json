{
  "registry_version": "v2025.05.21",
  "last_updated": "2025-05-21",
  "modules": {
    "core": {
      "merkle": {
        "merkle_tree.py": {
          "purpose": "Implements the Merkle tree data structure for cryptographic verification",
          "phase": "5.3",
          "dependencies": [],
          "canonical_path": "src/core/merkle/merkle_tree.py"
        },
        "merkle_sealing.py": {
          "purpose": "Provides sealing mechanism for outputs using Merkle trees",
          "phase": "5.3",
          "dependencies": ["merkle_tree.py", "schema_validator.py"],
          "canonical_path": "src/core/merkle/merkle_sealing.py"
        },
        "conflict_detection.py": {
          "purpose": "Detects and records conflicts in execution outputs",
          "phase": "5.3",
          "dependencies": ["merkle_tree.py", "schema_validator.py"],
          "canonical_path": "src/core/merkle/conflict_detection.py"
        },
        "output_capture.py": {
          "purpose": "Captures execution outputs for sealing",
          "phase": "5.3",
          "dependencies": ["schema_validator.py"],
          "canonical_path": "src/core/merkle/output_capture.py"
        }
      },
      "verification": {
        "network_topology_manager.py": {
          "purpose": "Manages network topology for distributed verification",
          "phase": "5.4",
          "dependencies": ["schema_validator.py"],
          "canonical_path": "src/core/verification/network_topology_manager.py"
        },
        "verification_node_manager.py": {
          "purpose": "Manages verification nodes in the network",
          "phase": "5.4",
          "dependencies": ["network_topology_manager.py", "schema_validator.py"],
          "canonical_path": "src/core/verification/verification_node_manager.py"
        },
        "consensus_service.py": {
          "purpose": "Implements consensus mechanisms for verification results",
          "phase": "5.4",
          "dependencies": ["verification_node_manager.py", "schema_validator.py"],
          "canonical_path": "src/core/verification/consensus_service.py"
        },
        "seal_distribution_service.py": {
          "purpose": "Distributes seals to verification nodes",
          "phase": "5.4",
          "dependencies": ["verification_node_manager.py", "merkle_sealing.py"],
          "canonical_path": "src/core/verification/seal_distribution_service.py"
        },
        "trust_aggregation_service.py": {
          "purpose": "Calculates trust scores based on verification results",
          "phase": "5.4",
          "dependencies": ["consensus_service.py", "verification_node_manager.py"],
          "canonical_path": "src/core/verification/trust_aggregation_service.py"
        },
        "seal_verification.py": {
          "purpose": "Verifies seal integrity and authenticity",
          "phase": "5.4",
          "dependencies": ["merkle_sealing.py", "schema_validator.py"],
          "canonical_path": "src/core/verification/seal_verification.py"
        }
      },
      "governance": {
        "governance_contract_sync.py": {
          "purpose": "Synchronizes governance contracts across nodes",
          "phase": "5.5",
          "dependencies": ["schema_validator.py", "network_topology_manager.py"],
          "canonical_path": "src/core/governance/governance_contract_sync.py"
        },
        "governance_mesh_integration.py": {
          "purpose": "Integrates governance mesh with verification network",
          "phase": "5.5",
          "dependencies": ["governance_contract_sync.py", "mesh_topology_manager.py"],
          "canonical_path": "src/core/governance/governance_mesh_integration.py"
        },
        "governance_proposal_protocol.py": {
          "purpose": "Implements protocol for governance proposals",
          "phase": "5.5",
          "dependencies": ["governance_contract_sync.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/governance_proposal_protocol.py"
        },
        "mesh_topology_manager.py": {
          "purpose": "Manages mesh topology for governance network",
          "phase": "5.5",
          "dependencies": ["network_topology_manager.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/mesh_topology_manager.py"
        },
        "governance_core.py": {
          "purpose": "Provides core governance functionality",
          "phase": "5.5",
          "dependencies": ["governance_contract_sync.py", "governance_proposal_protocol.py"],
          "canonical_path": "src/core/governance/governance_core.py"
        },
        "trust_boundary_manager.py": {
          "purpose": "Manages trust boundaries for governance",
          "phase": "5.6",
          "dependencies": ["governance_core.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/trust_boundary_manager.py"
        },
        "trust_propagation_engine.py": {
          "purpose": "Propagates trust across the governance mesh",
          "phase": "5.6",
          "dependencies": ["trust_boundary_manager.py", "governance_mesh_integration.py"],
          "canonical_path": "src/core/governance/trust_propagation_engine.py"
        },
        "attestation_service.py": {
          "purpose": "Provides attestation services for trust",
          "phase": "5.6",
          "dependencies": ["trust_propagation_engine.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/attestation_service.py"
        },
        "boundary_enforcement_module.py": {
          "purpose": "Enforces trust boundaries in the governance mesh",
          "phase": "5.6",
          "dependencies": ["trust_boundary_manager.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/boundary_enforcement_module.py"
        },
        "trust_surface_protocol.py": {
          "purpose": "Implements protocol for trust surface operations",
          "phase": "5.6",
          "dependencies": ["attestation_service.py", "boundary_enforcement_module.py"],
          "canonical_path": "src/core/governance/trust_surface_protocol.py"
        },
        "contract_sealer.py": {
          "purpose": "Create and verify cryptographic seals of contracts",
          "phase": "5.8",
          "dependencies": [],
          "canonical_path": "src/core/governance/contract_sealer.py",
          "codex_contract_version": "v2025.05.20"
        },
        "evolution_protocol.py": {
          "purpose": "Manage the contract evolution process through formal approval",
          "phase": "5.8",
          "dependencies": ["contract_sealer.py"],
          "canonical_path": "src/core/governance/evolution_protocol.py",
          "codex_contract_version": "v2025.05.20"
        },
        "codex_lock.py": {
          "purpose": "Main implementation of the Codex Mutation Lock system",
          "phase": "5.8",
          "dependencies": ["contract_sealer.py", "evolution_protocol.py", "src/core/trust/mutation_detector.py"],
          "canonical_path": "src/core/governance/codex_lock.py",
          "codex_contract_version": "v2025.05.20"
        },
        "module_extension_registry.py": {
          "purpose": "Central registry for managing governance module extensions and their metadata",
          "phase": "5.12",
          "dependencies": ["governance_primitive_manager.py", "seal_verification.py", "schema_validator.py"],
          "canonical_path": "src/core/governance/module_extension_registry.py",
          "codex_contract_version": "v2025.05.21"
        },
        "compatibility_verification_engine.py": {
          "purpose": "Verifies that new governance modules are compatible with existing modules and core governance principles",
          "phase": "5.12",
          "dependencies": ["module_extension_registry.py", "governance_primitive_manager.py", "trust_metrics_calculator.py", "seal_verification.py"],
          "canonical_path": "src/core/governance/compatibility_verification_engine.py",
          "codex_contract_version": "v2025.05.21"
        },
        "module_lifecycle_manager.py": {
          "purpose": "Manages the lifecycle of governance extension modules from installation to retirement",
          "phase": "5.12",
          "dependencies": ["module_extension_registry.py", "compatibility_verification_engine.py", "governance_audit_trail.py", "mutation_detector.py"],
          "canonical_path": "src/core/governance/module_lifecycle_manager.py",
          "codex_contract_version": "v2025.05.21"
        },
        "extension_point_framework.py": {
          "purpose": "Provides a framework for defining and implementing extension points in the governance system",
          "phase": "5.12",
          "dependencies": ["module_extension_registry.py", "governance_primitive_manager.py", "attestation_service.py"],
          "canonical_path": "src/core/governance/extension_point_framework.py",
          "codex_contract_version": "v2025.05.21"
        }
      },
      "trust": {
        "trust_log_writer.py": {
          "purpose": "Writes trust logs for execution outputs",
          "phase": "5.3",
          "dependencies": ["schema_validator.py"],
          "canonical_path": "src/core/trust/trust_log_writer.py"
        },
        "trust_surface_analytics.py": {
          "purpose": "Analyzes trust surface data for metrics and anomalies",
          "phase": "5.7",
          "dependencies": ["schema_validator.py", "trust_surface_protocol.py"],
          "canonical_path": "src/core/trust/trust_surface_analytics.py"
        },
        "trust_metrics_aggregator.py": {
          "purpose": "Aggregates trust metrics from multiple nodes",
          "phase": "5.7",
          "dependencies": ["trust_surface_analytics.py", "schema_validator.py"],
          "canonical_path": "src/core/trust/trust_metrics_aggregator.py"
        },
        "mutation_detector.py": {
          "purpose": "Detect unauthorized modifications to sealed contracts",
          "phase": "5.8",
          "dependencies": ["src/core/governance/contract_sealer.py"],
          "canonical_path": "src/core/trust/mutation_detector.py",
          "codex_contract_version": "v2025.05.20"
        }
      },
      "visualization": {
        "visualization_data_transformer.py": {
          "purpose": "Transforms trust data for visualization",
          "phase": "5.7",
          "dependencies": ["trust_metrics_aggregator.py", "schema_validator.py"],
          "canonical_path": "src/core/visualization/visualization_data_transformer.py"
        }
      },
      "common": {
        "schema_validator.py": {
          "purpose": "Validates data against JSON schemas",
          "phase": "5.3",
          "dependencies": [],
          "canonical_path": "src/core/common/schema_validator.py"
        }
      }
    },
    "integration": {
      "runtime_executor_integration.py": {
        "purpose": "Integrates runtime executor with sealing mechanism",
        "phase": "5.3",
        "dependencies": ["merkle_sealing.py", "runtime_executor.py", "output_capture.py"],
        "canonical_path": "src/integration/runtime_executor_integration.py"
      },
      "trust_log_integration.py": {
        "purpose": "Integrates trust logs with UI components",
        "phase": "5.3",
        "dependencies": ["trust_log_writer.py", "schema_validator.py"],
        "canonical_path": "src/integration/trust_log_integration.py"
      },
      "distributed_verification_integration.py": {
        "purpose": "Integrates distributed verification with core components",
        "phase": "5.4",
        "dependencies": [
          "verification_node_manager.py",
          "consensus_service.py",
          "seal_distribution_service.py",
          "trust_aggregation_service.py"
        ],
        "canonical_path": "src/integration/distributed_verification_integration.py"
      },
      "codex_lock_api.py": {
        "purpose": "API endpoints for interacting with the Codex Lock system",
        "phase": "5.8",
        "dependencies": ["src/core/governance/codex_lock.py"],
        "canonical_path": "src/integration/codex_lock_api.py",
        "codex_contract_version": "v2025.05.20"
      },
      "governance_extension_api.py": {
        "purpose": "Provides API endpoints for managing governance extensions",
        "phase": "5.12",
        "dependencies": ["module_extension_registry.py", "compatibility_verification_engine.py", "module_lifecycle_manager.py", "governance_integration_service.py"],
        "canonical_path": "src/integration/governance_extension_api.py",
        "codex_contract_version": "v2025.05.21"
      },
      "extension_visualization.py": {
        "purpose": "Integrates extension data with the visualization framework",
        "phase": "5.12",
        "dependencies": ["module_extension_registry.py", "compatibility_verification_engine.py", "governance_visualization.py"],
        "canonical_path": "src/integration/extension_visualization.py",
        "codex_contract_version": "v2025.05.21"
      }
    },
    "verification": {
      "seal_verification": {
        "path": "src/core/verification/seal_verification.py",
        "codex_contract_version": "v2025.05.18",
        "phase": "5.2",
        "schemas": ["replay_verification.schema.v1.json"],
        "depends_on": [],
        "purpose": "Provide cryptographic verification of execution replay logs"
      }
    },
    "utils": {
      "validate_schema.py": {
        "purpose": "Validates schemas for correctness",
        "phase": "5.3",
        "dependencies": [],
        "canonical_path": "src/utils/validate_schema.py"
      },
      "validate_schema_compliance.py": {
        "purpose": "Validates data compliance with schemas",
        "phase": "5.3",
        "dependencies": ["validate_schema.py"],
        "canonical_path": "src/utils/validate_schema_compliance.py"
      },
      "verify_log_hashes.py": {
        "purpose": "Verifies integrity of log hashes",
        "phase": "5.3",
        "dependencies": [],
        "canonical_path": "src/utils/verify_log_hashes.py"
      },
      "view_logs.py": {
        "purpose": "Provides utilities for viewing logs",
        "phase": "5.3",
        "dependencies": [],
        "canonical_path": "src/utils/view_logs.py"
      },
      "package_logs.py": {
        "purpose": "Packages logs for distribution",
        "phase": "5.3",
        "dependencies": ["verify_log_hashes.py"],
        "canonical_path": "src/utils/package_logs.py"
      },
      "test_data_generator.py": {
        "purpose": "Generates test data for various components",
        "phase": "5.3",
        "dependencies": [],
        "canonical_path": "src/utils/test_data_generator.py"
      },
      "repository_hygiene_validator.py": {
        "purpose": "Validates repository structure compliance",
        "phase": "5.2",
        "dependencies": [],
        "canonical_path": "src/utils/repository_hygiene_validator.py"
      },
      "analyze_component_usage.py": {
        "purpose": "Analyzes component usage patterns",
        "phase": "5.4",
        "dependencies": [],
        "canonical_path": "src/utils/analyze_component_usage.py"
      }
    },
    "visualization": {
      "visualization_data_transformer": {
        "path": "src/core/visualization/visualization_data_transformer.py",
        "codex_contract_version": "v2025.05.19",
        "phase": "5.7",
        "schemas": ["trust_visualization.schema.v1.json"],
        "depends_on": ["src/core/trust/trust_metrics_aggregator.py"],
        "purpose": "Transform trust data into visualization-ready format"
      }
    },
    "api": {
      "saas_connector.py": {
        "purpose": "Connects to SaaS APIs",
        "phase": "5.2",
        "dependencies": ["schema_validator.py"],
        "canonical_path": "src/api/saas_connector.py"
      }
    },
    "cli": {
      "cli_trigger.py": {
        "purpose": "Provides CLI interface for triggering operations",
        "phase": "5.2",
        "dependencies": ["schema_validator.py"],
        "canonical_path": "src/cli/cli_trigger.py"
      }
    },
    "main": {
      "main.py": {
        "purpose": "Main application entry point",
        "phase": "5.2",
        "dependencies": [
          "runtime_executor.py",
          "trust_log_writer.py",
          "schema_validator.py"
        ],
        "canonical_path": "src/main.py"
      },
      "runtime_executor.py": {
        "purpose": "Executes runtime operations",
        "phase": "5.2",
        "dependencies": ["schema_validator.py"],
        "canonical_path": "src/main/runtime_executor.py"
      }
    },
    "replay": {
      "replay_sealing.py": {
        "purpose": "Implements sealing for replay operations",
        "phase": "5.2",
        "dependencies": ["schema_validator.py"],
        "canonical_path": "src/replay/replay_sealing.py"
      },
      "deterministic_execution.py": {
        "purpose": "Provides deterministic execution for replays",
        "phase": "5.2",
        "dependencies": ["replay_sealing.py", "schema_validator.py"],
        "canonical_path": "src/replay/deterministic_execution.py"
      }
    },
    "ui": {
      "trust_surface_dashboard": {
        "trust_surface_dashboard.py": {
          "purpose": "Main entry point for trust surface dashboard",
          "phase": "5.7",
          "dependencies": ["visualization_data_transformer.py", "schema_validator.py"],
          "canonical_path": "src/ui/trust_surface_dashboard/trust_surface_dashboard.py"
        },
        "components": {
          "surface_view.py": {
            "purpose": "Provides interactive visualization of trust surfaces",
            "phase": "5.7",
            "dependencies": ["trust_surface_dashboard.py", "visualization_data_transformer.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/surface_view.py"
          },
          "metrics_panel.py": {
            "purpose": "Displays trust metrics in the dashboard",
            "phase": "5.7",
            "dependencies": ["trust_surface_dashboard.py", "trust_metrics_aggregator.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/metrics_panel.py"
          },
          "boundary_alerts.py": {
            "purpose": "Displays trust boundary alerts in the dashboard",
            "phase": "5.7",
            "dependencies": ["trust_surface_dashboard.py", "trust_boundary_manager.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/boundary_alerts.py"
          },
          "trend_charts.py": {
            "purpose": "Displays trust trend charts in the dashboard",
            "phase": "5.7",
            "dependencies": ["trust_surface_dashboard.py", "trust_surface_analytics.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/trend_charts.py"
          },
          "extension_management_dashboard.py": {
            "purpose": "Provides a dashboard for viewing and managing governance extensions",
            "phase": "5.12",
            "dependencies": ["governance_dashboard.py", "extension_visualization.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/extension_management_dashboard.py",
            "codex_contract_version": "v2025.05.21"
          },
          "compatibility_explorer.py": {
            "purpose": "Provides an interface for exploring compatibility between governance modules",
            "phase": "5.12",
            "dependencies": ["decision_explorer.py", "extension_visualization.py"],
            "canonical_path": "src/ui/trust_surface_dashboard/components/compatibility_explorer.py",
            "codex_contract_version": "v2025.05.21"
          }
        }
      }
    }
  }
}
